# uwsig使用配置文件启动
[uwsgi]
# 项目目录
chdir=/usr/Project_5510
wsgi-file=test2/wsgi.py
# 指定项目的application
module=teacher.wsgi:application
# 指定socket,communicate with nginx   
socket = 127.0.0.1:8002
# 进程个数       
workers=2
#线程个数
threads = 3
#这里要注意，如果是普通的应用，进程个数设为5，线程个数就不用设置了，注释掉。我这里不要多进程的原因，多进程每次都会init一次choice的api，而且由于
#只有一个进程能用这个api，还会互相冲掉线。用多线程的话不仅能保持并发（设置timeout=10s试过了，真的是同时返回的），而且不会每次都init一次api了。
#pidfile=/opt/proj/script/uwsgi.pid
# 指定IP端口       
http=0.0.0.0:8003
# 指定静态文件
#static-map=/static=/opt/proj/teacher/static
# 启动uwsgi的用户名和用户组
uid=root
gid=root
# 启用主进程
master=true
# 自动移除unix Socket和pid文件当服务停止的时候
vacuum=true
# 序列化接受的内容，如果可能的话
thunder-lock=true
# 启用线程
enable-threads=true
# 设置自中断时间
harakiri=30
# 设置缓冲
post-buffering=4096
# 设置日志目录
#daemonize=/home/Desktop/Project/test2/script/uwsgi.log
max-requests=5000 
#为每个工作进程设置请求数的上限。当一个工作进程处理的请求数达到这个值，那么该工作进程就会被回收重用（重启）。你可以使用这个选项来默默地对抗内存泄漏
